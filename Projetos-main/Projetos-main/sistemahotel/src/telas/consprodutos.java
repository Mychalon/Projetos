/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package telas;
import java.sql.Connection;
import dao.ProdutoDAO;
import model.Produto;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JDialog;


public class consprodutos extends javax.swing.JInternalFrame {
    private ArrayList<Produto> listaProdutos;
    private ProdutoDAO produtoDAO; // Adicionar referência ao DAO
  
    public consprodutos() {
        initComponents();
        try {
            produtoDAO = new ProdutoDAO(); // Inicializa o DAO
            listaProdutos = (ArrayList<Produto>) produtoDAO.buscarTodos(); // Busca todos os produtos
            carregarProdutosNaTabela();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o banco de dados: " + ex.getMessage());
        }
    }

    public consprodutos(Connection conexao) {
    initComponents();
    try {
        produtoDAO = new ProdutoDAO(conexao); // Passa a conexão
        listaProdutos = (ArrayList<Produto>) produtoDAO.buscarTodos();
        carregarProdutosNaTabela();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao conectar com o banco de dados: " + ex.getMessage());
    }
}
    
private void carregarProdutosNaTabela() {
    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
    modelo.setRowCount(0);

    if (listaProdutos != null) {
        for (Produto produto : listaProdutos) {
            modelo.addRow(new Object[]{
                produto.getCodigo(),       // Coluna 0 - Código
                produto.getNome(),        // Coluna 1 - Nome
                produto.getQuantidade(),   // Coluna 2 - Quantidade
                produto.getPreco()        // Coluna 3 - Preço
            });
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Do Produto", "Quant.", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(4);
            jTable1.getColumnModel().getColumn(2).setMinWidth(100);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(4);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome do Produto");

        jButton1.setText("Procurar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Editar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 String nomeProduto = jTextField1.getText().trim().toLowerCase();
    
    if (nomeProduto.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Digite um nome para pesquisar");
        return;
    }

    try {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0); // Limpa a tabela
        
        // Busca produtos que contenham o texto digitado (busca parcial)
        List<Produto> produtosEncontrados = produtoDAO.buscarPorNome(nomeProduto);
        
        for (Produto produto : produtosEncontrados) {
            modelo.addRow(new Object[]{
                produto.getCodigo(),
                produto.getNome(),
                produto.getQuantidade(),
                produto.getPreco()
            });
        }
        
        if (modelo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum produto encontrado com esse nome");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao buscar produtos: " + ex.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     int linhaSelecionada = jTable1.getSelectedRow();
    
    if (linhaSelecionada < 0) {
        JOptionPane.showMessageDialog(this, 
            "Selecione um produto para editar",
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Obtém o código do produto selecionado
        String codigo = (String) jTable1.getValueAt(linhaSelecionada, 0);
        
        // Busca o produto completo no banco
        Produto produto = produtoDAO.buscarPorCodigo(codigo);
        
        if (produto != null) {
            // Abre a tela de edição
            EditarProduto editar = new EditarProduto(produto);
            editar.setVisible(true);
            
            // Adiciona a janela de edição ao desktop pane
            this.getParent().add(editar);
            editar.setLocation(
                (this.getParent().getWidth() - editar.getWidth()) / 2,
                (this.getParent().getHeight() - editar.getHeight()) / 2
            );
            
            try {
                editar.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {
                e.printStackTrace();
            }
            
            // Atualiza a tabela após edição
            listaProdutos = (ArrayList<Produto>) produtoDAO.buscarTodos();
            carregarProdutosNaTabela();
        } else {
            JOptionPane.showMessageDialog(this, 
                "Produto não encontrado no banco de dados",
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao buscar produto: " + ex.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
jTextField1.setText(""); // Limpa o campo de pesquisa
    
    try {
        // Recarrega todos os produtos do banco
        listaProdutos = (ArrayList<Produto>) produtoDAO.buscarTodos();
        carregarProdutosNaTabela();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao recarregar produtos: " + ex.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public Produto getProdutoSelecionado() {
      int linha = jTable1.getSelectedRow();
    if (linha >= 0) {
        String codigo = (String) jTable1.getValueAt(linha, 0);
        try {
            return produtoDAO.buscarPorCodigo(codigo);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    return null;
  }

    void setLocationRelativeTo(JDialog parentDialog) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
